#!/usr/bin/python
import sys
import os
from optparse import OptionParser
import cPickle as pickle


def look_at_asyncs(acc_dict, cont_dict, device_name):
    async_path = os.path.join(device_name, 'async_pending')
    total = 0

    for async_suffix in os.listdir(async_path):
        for async_file in os.listdir(os.path.join(async_path, async_suffix)):
            try:
                async_file = os.path.join(async_path, async_suffix, async_file)
                file_data = pickle.load(open(async_file))
                acc = file_data['account']
                cont = file_data['container']
                if not (acc or cont):
                    print "Error: %s has invalid data" % async_file
                    continue
                if not acc in acc_dict:
                    acc_dict[acc] = {'num_asyncs': 0, 'files': [],
                                     'async_times': []}
                if (acc, cont) not in cont_dict:
                    cont_dict[(acc, cont)] = {'num_asyncs': 0, 'files': [],
                                              'async_times': []}
                acc_dict[acc]['num_asyncs'] += 1
                acc_dict[acc]['files'].append(async_file)
                acc_dict[acc]['async_times'].append(
                    float(file_data['headers']['x-timestamp']))

                cont_dict[(acc, cont)]['num_asyncs'] += 1
                cont_dict[(acc, cont)]['files'].append(async_file)
                cont_dict[(acc, cont)]['async_times'].append(
                    float(file_data['headers']['x-timestamp']))
                total += 1
            except KeyError, e:
                print "KeyError: %s has invalid data. %s" % (async_file, e)
                continue


def print_results(acc_dict, cont_dict, num_results=5):
    total = 0
    for res_dict in acc_dict.values():
        total += res_dict['num_asyncs']

    acc_results = sorted(acc_dict.items(),
                         cmp=lambda a, b: cmp(b[1]['num_asyncs'],
                                              a[1]['num_asyncs']))
    cont_results = sorted(cont_dict.items(),
                          cmp=lambda a, b: cmp(b[1]['num_asyncs'],
                                               a[1]['num_asyncs']))

#    print "\nRESULTS FOR %s" % device_name
    print "Async Results"

    for name, result in [('Accounts', acc_results),
                         ('Account, Containers', cont_results)]:

        print '{0:^50}'.format('Top %s %s w/ asyncs' % (num_results, name)), \
              '{0:^5}'.format('#'), \
              '{0:^10}'.format('tDiff'), \
              '{0:^5}'.format('Perc'), \
              '{0:^15}'.format('Ex')
        print '-' * 80

        for i in range(min(num_results, len(result))):
            min_time = min(result[i][1]['async_times'])
            max_time = max(result[i][1]['async_times'])
            tdiff = max_time - min_time
            if tdiff > 60 * 60 * 24:
                tdiff_mess = "%.1f days" % (tdiff / (60.0 * 60 * 24))
            elif tdiff > 60 * 60:
                tdiff_mess = "%.1f hrs" % (tdiff / (60.0 * 60))
            else:
                tdiff_mess = "%d scs" % tdiff

            num = int(result[i][1]['num_asyncs'])
            print '{0:^50}'.format(result[i][0]), \
                  '{0:^5}'.format(num), \
                  '{0:^10}'.format(tdiff_mess), \
                  '{0:^5}'.format('%d%%' % int(float(num)/total * 100)), \
                  '{0:^15}'.format(result[i][1]['files'][0])

        print
        print

if __name__ == '__main__':
    parser = OptionParser(usage='''
Usage: async-tool [options] [<device-name-pattern>...]
Will look through a swift object-server's async-pendings and tell you about them.''')

    parser.add_option('-n', '--num_results', dest='num_results',
        default='5',
        help='Number of results to return defaults to 5')

    args = sys.argv[1:]
    if not args:
        args.append('-h')
    options, args = parser.parse_args(args)

    if not args:
        parser.print_help()
        exit()
    acc_dict = {}
    cont_dict = {}
    for dev in args:
        look_at_asyncs(acc_dict, cont_dict, dev)
    print_results(acc_dict, cont_dict, int(options.num_results))

